
1) Яку роль відіграє файл iostream в вводі-виводі с++?
    Це файл вводву та виводу що був додавлений в мову С++ для більше простішої 
    та кращої роботи з ввовдом виводом. А саме він додає константи та маніпулятори, 
    а також об'єкти такі як cin, cout, cerr та clog (та їх еквіваленти). 
    Також в цей файл зазвичай добавляють і інші важливі файли 

2) Чому ввід число 121 с клавіатури вимагає від програми перетворення?
    Консоль сприймає ввід як набір символі. Байдуже чи це пробіл, число чи буква.
    Для буфера це все вважається символами. Якщо ми хочемо набір символів "121"
    представити у вигляді типу int то ми повинні цей текст конвертувати в число.

3) В чому різниця між потоком стандартного ввода і стандартним потоком помилок?
    По замовчуванню що стандартни потік вводу що стандартний потік помилок, вони
    виводять інформацію на монітор. Але у випадку якщо операційна система
    перенаправляє інфомацію про помилки в файл то стандартний потік помилок це і виконає.

4) Чому cout може відображати різні тими с++ без необхідності вказувати інструкції для кожного типу?
    Це тому що cout являється обєктом класу що перевизначає operator<<() для всіх цих типів

5) Яка властивість методів виводу дозволяє виконувати конкатенацію виводу?
    методи викликаються відносно об'єкта що використовуться, наприклад cin або cout.
    Так от оскільки методи повертають той об'єкт що виокристовують то ми можемо
    повторно викликати методи віндосно цього об'єкту, а отже виконувати конкатенацію

6) Напишіть програму що запитує ціле число і потім відображає його 
    в десятковій, вісімковій та шіснадцятковій формі. Відображати це все в одній строці,
    в полях шириною 15 символів, з використанням префіксів с++ для основ систем числення

    #include <iostream>
    #include <iomanip>

    using namespace std;

    int main()
    {

        int number;
        cout << "Enter number: ";
        cin >> number;
        cout << setw(15) << "base ten" 
            << setw(15) << "base eight" 
            << setw(15) << "base sixteen" << endl;
        cout.setf(ios::showbase); 
        cout << setw(15) << number
            << oct << setw(15) << number
            << hex << setw(15) << number;

        return 0;
    }

7) Напишіть програму, яка запитуватиме наступну інформацію і форматуватиме її, як показано нище:

    Enter your name: Billy Gruff 
    Enter your hourly wagez: 12 
    Enter number of hours worked: 7.5 
    First format: 
                    Billy Gruff:$     12.00:  7.5 
    Second format: 
    Billy Gruff                 : $12.00     :7.5 

    #include <iostream>
    #include <iomanip>
    #include <string>

    using namespace std;

    int main()
    {

        string name;
        double hourly;
        double hours;
        cout << "Enter your name: "; //Billy Gruff
        getline(cin, name);   
        cout << "Enter your hourly wagez: "; //12
        cin >> hourly;
        cout << "Enter number of hours worked: "; //7.5
        cin >> hours;

        cout.setf(ios::showpoint);
        cout.setf(ios::fixed, ios::floatfield);
        cout.setf(ios::right, ios::adjustfield);

        cout << "First format: " << endl;
        cout << setw(30) << name << ": $" << setprecision(2)
            << setw(10) << hourly << ":" << setprecision(1)
            << setw(5) << hours << endl;

        cout.setf(ios::left, ios::adjustfield);

        cout << "Second format: " << endl;
        cout << setw(30) << name << ": $" << setprecision(2)
            << setw(10) << hourly << ":" << setprecision(1)
            << setw(5) << hours << endl;

        return 0;
    }

8) Нехай в нас є наступна програма 
    #include <iostream>

    using namespace std;

    int main()
    {
        char ch;
        int ct1 = 0;

        cin >> ch;
        while(ch != 'q')
        {
            ct1++;
            cin >> ch;
        }
        
        int ct2 = 0;
        cin.get(ch);
        while(ch != 'q')
        {
            ct2++;
            cin.get(ch);
        }

        cout << "ct1 = " << ct1 << "; ct2 = " << ct2 << endl;
        
        return 0;
    }

    Що виведеться на екран якщо ввести
    I see a q<Enter>
    I see a q<Enter> 
    Тут <Enter>, означає натискання клавіші

    ct1 = 5; // Тут ми ігноруємо пробілиі символи нової строки
    ct2 = 9; // А тут ми не ігноруємо ніяких символів

9) Обидва наступні оператори читають і відкидують символи, 
    до кінця строки, включно з ним. То чим вони відрізняються?

    while(cin.get() ! = '\n') 
        continue;   
    cin.ignore(8O, '\n'); 

    Приклад з while дійсно відкідає всі символи навіть кінець самої строки.
    Але приклад з ignore() ні. Він відкидає вказану кількість символів. Це означає
    що якщо ввід перевищить 80 символів, то проблема повернеться.