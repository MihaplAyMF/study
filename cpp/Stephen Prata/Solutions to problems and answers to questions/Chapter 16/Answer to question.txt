
1) Нехай в нас є наступне об'явлення класу

    class RQ1
    {
    private:
        char* st;
    public:
        RQ1() { st = new char[1]; strcpy(st, ""); }
        RQ1(const char* s) { st = new char[strlen(s + 1)]; strcpy(st, s); }
        RQ1(const RQ1& rq) { st = new char[strlen(rq.st) + 1]; strcpy(st, rq.st); }
        ~RQ1() { delete [] st; }
        RQ1& operator= (const RQ1& rq);
    }

    перпепишіть використовуючи об'явлення string. Які методи більше не 
    потрібні в явних визначеннях?

    class RQ2
    {
    private:
        string st;
    public:
        RQ2() { st = ""; }                // або так
        RQ2(const char* s) : st(s) {}     // { st = s; } 
        RQ2(const RQ2& rq) : st(rq.st) {} // { st = rq.st; }
        void Print() { cout << st << endl; }
        ~RQ2() {} // не потрібно, оскільки ми не виділяємо пам'ять
        RQ2& operator= (const RQ2& rq)
        {
            st = rq.st; 
            return *this;
        }
    };

2) Назвіть хоча б дві переваги string в порівнянні зі строками в стилі C.

    - не потрібно динамічно виділяти пам'ять.
    - не потрібно явно створювати конструктор копії
    - в класа string є багато корисних методів

3) Напишіть функцію, яка приймає силку на об'єкт string в якості аргументи 
    і міняє всі символи строки на великі літери.

    void stringToUpper(string& other)
    {
        for(size_t i = 0; i < other.length(); i++)
        {
            other[i] = toupper(other[i]);
        }
    }

4) Які з наступних операторів не являються коректним використанням auto_ptr?

    auto_ptr<int> pia(new int[20]); // ми вказали тип int, а використовуємо int[]
    auto_ptr<string> (new string);  // Ми повинні вказати ім'я
    int rique = 7;                  // Ми створюємо змінну rique щоб передати посилання для auto_ptr,
    auto_ptr<int> pr(&rique);       // але через це ми не виділяємо пам'ять. Вказівник спробує її видалити і буде помилка виконання. 
    auto_ptr dbl (new double);      // Ми повинні вказати тип 
    
5) Якщо можна було би створити механічний еквівалент стеку, який зберігає клюшки    
    для гольфа замість номерів, чому він був би поганою сумкою для гольфа?

    Тому що ми не можемо обрати ту клюшку яку хочемо. Ми можемо використати
    лише ту яка була покладена в сумку першою. Якщо ж ми хочемо отримати ту
    яка була покладена останньою, то нам довелося б витягати всі клюшки перед цим.

6) Чому контейнер set - поганий вибір для зберігання записів про отримані очків
    в гольф, в форматі від лунки до лунки?

    Тому що set зберігає значення за типом ключа. В форматі від лунки до лунки
    потрібно також пам'ятати значення кількості потрібний ударів які має виконати гравець.
    Наприклад якщо для того щоб завершити лунку потрібно 4 удари, а гравець зробить 5 то він
    отримає 1 очко. Вигідніше б було використовувати map де ми могли б як ключ обирати
    кількість необхідних ударів. Якщо є дві лунки або більше то ми могли б записувати ключ 
    типом string. Наприклад так "First hole - 4", "Second hole - 5", "Thirsd hole - 4". А другим
    значеннм кількість ударів що зробив гравець. 

7) Якщо вказівник - це ітератор, то чому розробники STL просто не використовують
    сам вказівник замість ітераторів?

    Концепт ітераторів, позволяє пробігати по контейнеру від першого елементу
    до останнього, в той час як вказівники вони лише дають конкретне значення елемента
    Ітератори це абстрація яка позволяє більш гнучко працьовати над контейнераим.

8) Чому розробники STL не розробили віддільний базовий клас для ітераторів, використовуючи
    наслідування для породжених класів і не викликали алгоритми в термінах цього класу.

    Вони не розробили базовий клас ітераторів через різноманітність контейнерів. Кожен
    контейнер реалізує ітератори по різному, узагальнити їх в один базовий клас було б 
    набагато складніше. Також цей підхід позволяє функціям STL використовувати як звичайні вказівники
    так і ітератори, збільшуючи їх універсальність.

9) Приведіть три приклади чому vector кразе за звичайний масив.

    - vector автоматично перерозподіляє дані в пам'яті коли з масивами ми поивнні це робити самі
    - у vector є додаткові методи для роботи, яких немає в масиву
    - vector є більшу універсальним

10) Якщо в коді з лістинку 16.9 використати list замість vector, то які частини
    програми стануть некоректними? Чи легко їх виправити? Якщо та то як?

    Код працює так само за виключенням двох алгоритмічних функції
    Перша це sort(), вона вимагає ітераторів з довільним доступом
    до елементів, але оскільки ми змінили вектор на список, то тепер ітератор
    що передається у функцію є лише двонаправленим. А отдже код працювати не буде
    Ми можемо використовувати метод sort самомго списку, замість алгоритмічного сортування.
    Друга це random_shuffle() вона теж вимагає ітератор з довільним доступом.
    Ми могли зробити тимчасовий вектор який потім переприсвоїти в список, але навіщо?
    Якщо можна просто використовувати вектор. 